



Automated Certificate Management Environment                 G. D. Marco
Internet-Draft                                               independent
Intended status: Standards Track                            16 July 2023
Expires: 17 January 2024


Automatic Certificate Management Environment (ACME) with OpenID Connect
                             Federation 1.0
              draft-demarco-acme-openid-federation-latest

Abstract

   The Automatic Certificate Management Environment (ACME) is the
   standard [RFC8555] that allows obtaining certificates for websites
   (HTTPS [RFC2818]) by verifing the "fully-qualified" domain names
   [RFC3696] and the web servers within these.

   OpenID Connect Federation 1.0 [OIDC-FED] is the standard that allows
   building multilateral federations through a trust evaluation
   mechanism attesting the possession of public keys, signature
   capabilities, protocol specific metadata and several administrative
   and tecnical information in the form of trust marks, related to a
   specific entity belonging to an organization.

   This document defines how the X.509 certificates can be issued by a
   trust anchor and its intermediates through the ACME protocol to all
   the organizations that are part of a federation built on top of
   OpenID Connect Federation 1.0.

About This Document

   This note is to be removed before publishing as an RFC.

   Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-demarco-acme-openid-
   federation/.

   Discussion of this document takes place on the Automated Certificate
   Management Environment Working Group mailing list
   (mailto:acme@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/browse/acme/.  Subscribe at
   https://www.ietf.org/mailman/listinfo/acme/.

   Source for this draft and an issue tracker can be found at
   https://github.com/peppelinux/draft-demarco-acme-openid-federation.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 17 January 2024.

Copyright Notice

   Copyright (c) 2023 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Audience Target and Use Cases
   3.  Terminology
   4.  Conventions and Definitions
   5.  Protocol Flow
     5.1.  Discovery Preconditions
     5.2.  Overview
     5.3.  Metadata
     5.4.  newNonce request
     5.5.  ACME newOrder request within a Federation
       5.5.1.  Federation Extensions and Constraints
   6.  Federation Identifiers Types
   7.  Security Considerations
   8.  IANA Considerations
   9.  Normative References
   Acknowledgments
   Author's Address

1.  Introduction

   OpenID Connect Federation 1.0 allows an ACME server to issue X.509
   certificates to one or more than a single organization without having
   pre-established any direct relationship or any stipulation of a
   contract.  In a multilateral federation, composed by thousands of
   entities belonging to different organizations, all the participants
   adhere to the same regulation or trust framework.  OpenID Connect
   Federation 1.0 allows each participant to recognize the other
   participant using a trust evaluation mechanism, with RESTful services
   and cryptographic materials.

   Considering that a requestor is an entity requesting the issuance of
   a X.509 certificate to a server and the issuer is the ACME server
   that validates the entitlements of the requestor before issuing the
   X.509 certificate, this specification defines how ACME and OpenID
   Connect Federation 1.0 can be integrated allowing an efficient
   issuance of X.509 to a requestor, reducing both the bureaucratic and
   the implementative costs, since:

   *  It does not require the involvement of other resources than the
      ACME newNonce and newOrder endpoints, since the authentication and
      authorization of the requestor is asserted with OpenID Federation
      1.0.

   *  Instead of the /.well-known/acme-challenge/{token} endpoint it
      defines how to use and validate a basic OpenID Connect Federation
      component, called Entity Configuration, that is a signed JWT
      published in a well-known resource (/.well-known/openid-
      federation).

   *  It removes the requirement for the authentication of an entity and
      the provisioning of the _acme-challenge token_, since the
      authorization mechanisms is built on top of the trust evaluation
      model as defined in OpenID Connect Federation 1.0.

   *  It extends the ACME newOrder endpoint, defining a new payload
      identifier type called openid-federation.

   *  It defines how the OpenID Federation Entity Statements can be used
      for the publication of the X.509 certificates, by a trust anchor
      or intermediate, that was previously issued with ACME.

2.  Audience Target and Use Cases

   The audience of the document are the multilateral federations that
   require automatic issuance of X.509 certificates using an
   infrastructure of trust based on OpenID Connect Federation 1.0.

   This specification can be implemented by:

   *  Federation Entities that joins to a federation staging area using
      HTTP only transport to attests themselves as trustworhty, and then
      ask X.509 certificates for their official HTTPs Federation Entity
      ID.

   *  Federation Entities that want to ask and obtain X.509 certificate
      for every Federation Key contained in their Entity Configuration,
      as made recognizable in a Federation Trust Chain.

3.  Terminology

   *ACME*, Automated Certificate Management Environment, a certificate
   management protocol [RFC8555].

   *TA*, OpenID Connect Federation Trust Anchor, see CA

   *CA*, Certification Authority, also known as Trust Anchor or
   Intermediate, specifically one that implements the ACME protocol by
   serving an ACME server.

   *CSR*, Certificate Signing Request, specifically a PKCS#10 [RFC2986]
   as supported by ACME.

   *FQDN*, Fully Qualified Domain Name.

   *Requestor*, Federation Entity that requests a X.509 certificate to a
   CA.

   *Issuer*, Federation Entity that serves an ACME Server.  The
   Federation Entity is then a CA.

   The terms "Federation Entity", "Trust Anchor", "Intermediate",
   "Entity Configuration", "Entity Statement", "Trust Mark" and "Trust
   Chain" used in this document are defined in the Section 1.2
   (https://openid.net/specs/openid-connect-federation-1_0.html#name-
   terminology) of [OIDC-FED].

4.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

5.  Protocol Flow

   This section presents the protocol flow.  The protocol flow is
   subdivided in the following phases:

   *  *Discovery*, the Requestor obtains the available CAs within a
      federation.

   *  *Order request*, the Requestor requests a X.509 certificate to a
      CA.

5.1.  Discovery Preconditions

   The protocol assumes the following discovery preconditions are met,
   where for discovery is intended the phase where a Requestor searches
   an Issuer to requests an X.509 certificate.

   1.  The Requestor and the Issuer MUST publish their Entity
       Configuration as defined in the Section 6
       (https://openid.net/specs/openid-connect-federation-
       1_0.html#name-obtaining-federation-entity) of [OIDC-FED].

   2.  The Requestor and the Issuer MUST be able to establish the trust
       to each other obtaining the Trust Chain of each other, as defined
       in the Section 3.2 (https://openid.net/specs/openid-connect-
       federation-1_0.html#name-trust-chain) of [OIDC-FED].

   3.  The Trust Anchor and its Intermediates SHOULD implement an ACME
       server with at least the newNonce and the newOrder endpoints, as
       extended accordingly by this document.

   4.  The Issuer MUST publish in its Entity Configuration, within the
       metadata parameter as defined in the Section 4
       (https://openid.net/specs/openid-connect-federation-
       1_0.html#name-metadata-type-identifiers) of [OIDC-FED], the
       metadata type acme_provider according to the Section 5.3 of this
       specification.

   5.  The Issuer MAY be a Leaf, in these cases a specific Trust Mark
       SHOULD be issued by the Trust Anchor, or on behalf of it by an
       allowed Trust Mark issuer as configured in the federation, and.
       the Trust Mark MUST then be published within the Leaf Entity
       Configuration.

   Where the precondition number 4 and number 5 are not met, there MAY
   be some cases where the Requestor known a priori which are the
   Issuers in one or more federations, in this case the requestor
   directly requests the issuance of the X.509 certificate to the
   trusted Issuer.

5.2.  Overview

   TBD: high level design and ascii sequence diagram.

   1.  The Requestor checks if its superior Federation Entity supports
       the ACME protocol for OpenID Connect Federation 1.0.  If not, the
       Requestor starts the discovery process to find which are the
       Issuers within the federation.

   2.  The Requestor obtains a new nonce from the Issuer, by sending a
       HTTP HEAD request to the Issuer's newNonce resource;

   3.  The Issuer evaluates the trust to the Requestor by checking if it
       is part of the federation.  If not the request MUST be rejected
       (*TBD* the error to return).  There are two ways the Issuer is
       able to check if a Requestor is part of the federation, these are
       listed below:

       *  The Requestor adds the Trust Chain JWS header parameter
          related to itself, this option is RECOMMENDED since it reduces
          the effort of the Issuer in evaluating the trust to the
          Requestor;

       *  The Requestor doesn't add the Trust Chain in the request, then
          the Issuer MUST start a Federation Entity Discovery to obtain
          the Trust Chain related to the Requestor.

   4.  The Requestor begins the certificate issuance process by sending
       a POST request to the Issuer's newOrder resource.

   Below is represented the summary of all the actions supported by the
   protocol defined in this document.

   +==================+==========================+====================+
   | Action           | Request                  | Succesful Response |
   +==================+==========================+====================+
   | Discovery        | GET Entity Configuration | 200                |
   +------------------+--------------------------+--------------------+
   +------------------+--------------------------+--------------------+
   | Get nonce        | HEAD newNonce            | 200                |
   +------------------+--------------------------+--------------------+
   +------------------+--------------------------+--------------------+
   | Submit order     | POST newOrder            | 201                |
   +------------------+--------------------------+--------------------+
   +------------------+--------------------------+--------------------+
   | Fetch challenges | POST-as-GET order's      | 200                |
   |                  | authorization urls       |                    |
   +------------------+--------------------------+--------------------+
   +------------------+--------------------------+--------------------+
   | Respond to       | POST authorization       | 200                |
   | challenges       | challenge urls           |                    |
   +------------------+--------------------------+--------------------+
   +------------------+--------------------------+--------------------+
   | Poll for status  | POST-as-GET order        | 200                |
   +------------------+--------------------------+--------------------+
   +------------------+--------------------------+--------------------+
   | Finalize order   | POST order's finalize    | 200                |
   |                  | url                      |                    |
   +------------------+--------------------------+--------------------+
   +------------------+--------------------------+--------------------+
   | Poll for status  | POST-as-GET order        | 200                |
   +------------------+--------------------------+--------------------+
   +------------------+--------------------------+--------------------+
   | Download         | POST-as-GET order's      | 200                |
   | certificate      | certificate url          |                    |
   +------------------+--------------------------+--------------------+
   +------------------+--------------------------+--------------------+

                                 Table 1

5.3.  Metadata

   The Issuer MUST publish its Entity Configuration including the
   acme_provider metadata within it.

   This section describe how to use the parameters defined in the
   Section 7.1.1 (https://datatracker.ietf.org/doc/html/rfc8555#section-
   7.1.1) of [RFC8555] in the federation Entity Configuration of an
   Issuer.

   json { "metadata": "acme_provider": { "newNonce":
   "https://issuer.example.com/acme/new-nonce", "newOrder":
   "https://issuer.example.com/acme/new-order", "revokeCert":
   "https://issuer.example.com/acme/revoke-cert", "keyChange":
   "https://issuer.example.com/acme/key-change", "meta": {
   "termsOfService": "https://issuer.example.com/acme/terms/2017-5-30",
   "website": "https://www.issuer.example.com/", "caaIdentities":
   [!"issuer.example.com"], "externalAccountRequired": false } }

5.4.  newNonce request

   The Requestor MUST obtain a new nonce from the Issuer, according to
   the Section 7.2 (https://datatracker.ietf.org/doc/html/
   rfc8555#section-7.2) of [RFC8555].

5.5.  ACME newOrder request within a Federation

   The certificate issuance request is made by sending a HTTP POST to
   the Issuer newOrder resource, where the body of the POST is a JWS
   object whose JSON payload is a subset of the _ACME order object_, as
   defined in the Section 7.4 (https://datatracker.ietf.org/doc/html/
   rfc8555#section-7.4) of [RFC8555].

   The _ACME order object_ represents the request for a certificate
   issuance and is used to track the progress of that order through to
   issuance (see the Section 7.1.6
   (https://datatracker.ietf.org/doc/html/rfc8555#section-7.1.6) of
   [RFC8555] for any further information about the statuses).

5.5.1.  Federation Extensions and Constraints

   To the _ACME order object_ properties already defined in the
   Section 7.1.3 (https://datatracker.ietf.org/doc/html/rfc8555#section-
   7.1.3) of [RFC8555] are added those defined by this document and
   listed below, to be intended as extensions to [RFC8555].

    +===========+=============+============+==========+===============+
    | place     | parameter   | type       | presence | reference     |
    +===========+=============+============+==========+===============+
    | protected | trust_chain | JSON Array | OPTIONAL | [OIDC-FED],   |
    | headers   |             | of JWS     |          | Section 3.2.1 |
    +-----------+-------------+------------+----------+---------------+

                                  Table 2

   When OpenID Connect Federation 1.0 is used by the Issuer to attest
   the reliabiability of a Requestor and then authorize its request,
   this specification adds the following constraints to the
   payload.identifiers JSON Array:

   *  type MUST be set to openid-federation;

   *  value MUST correspond to the FQDN contained within the iss
      parameter of the Requestor's Entity Configuration.  Since the
      Federation Entity ID is a HTTP URL, the corresponding FQDN MUST be
      extracted it.  For example, if the Entity Configuration iss
      parameter contains the value https://requestor.example.org/oidc/
      rp, then the extracted FQDN is requestor.example.org and MUST
      correspond to the value of the identifier contained in the order
      object;

   *  the maximum length of the JSON Array contained in the identifiers
      parameter MUST be 1, since there cannot be more than a single FQDN
      corresponding to a single Federation Entity.  If other identifiers
      are present in the request and different from the type openid-
      federation, these SHOULD be ignored.

   ```http

   POST /acme/new-order HTTP/1.1 Host: issuer.example.com Content-Type:
   application/jose+json

   { "protected": base64url({ "alg": "ES256", "kid": "1", "nonce":
   "5XJ1L3lEkMG7tR6pA00clA", "url": "https://issuer.example.com/acme/
   new-order", "trust_chain": ["eyJhbGciOiJFU ...", "eyJhbGci ..."] }),
   "payload": base64url({ "identifiers": [{ "type": "openid-federation",
   "value": "requestor.example.org" }], "notBefore":
   "2024-01-01T00:04:00+04:00", "notAfter": "2024-01-08T00:04:00+04:00"
   }), "signature": "H6ZXtGjTZyUnPeKn...wEA4TklBdh3e454g" }

   ```

6.  Federation Identifiers Types

   The "ACME Identifier Types" registry defined in the Section 9.7.7
   (https://datatracker.ietf.org/doc/html/rfc8555#section-9.7.7) of
   [RFC8555] is extended with the types of identifiers listed below.

   Template:

   *  Label: The value to be put in the "type" field of the identifier
      object.

   *  Reference: Where the identifier type is defined.

   Contents:

       +===================+======================================+
       | Label             | Reference                            |
       +===================+======================================+
       | openid-federation | draft-demarco-acme-openid-federation |
       +-------------------+--------------------------------------+
       +-------------------+--------------------------------------+

                                 Table 3

7.  Security Considerations

   TBD.

8.  IANA Considerations

   This document has no IANA actions.

9.  Normative References

   [OIDC-FED] Hedberg, R., Jones, M. B., Solberg, A. Å., Bradley, J., De
              Marco, G., and V. Dzhuvinov, "OpenID Connect Federation
              1.0", n.d..

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC2818]  Rescorla, E., "HTTP Over TLS", RFC 2818,
              DOI 10.17487/RFC2818, May 2000,
              <https://www.rfc-editor.org/rfc/rfc2818>.

   [RFC2986]  Nystrom, M. and B. Kaliski, "PKCS #10: Certification
              Request Syntax Specification Version 1.7", RFC 2986,
              DOI 10.17487/RFC2986, November 2000,
              <https://www.rfc-editor.org/rfc/rfc2986>.

   [RFC3696]  Klensin, J., "Application Techniques for Checking and
              Transformation of Names", RFC 3696, DOI 10.17487/RFC3696,
              February 2004, <https://www.rfc-editor.org/rfc/rfc3696>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC8555]  Barnes, R., Hoffman-Andrews, J., McCarney, D., and J.
              Kasten, "Automatic Certificate Management Environment
              (ACME)", RFC 8555, DOI 10.17487/RFC8555, March 2019,
              <https://www.rfc-editor.org/rfc/rfc8555>.

Acknowledgments

   TODO acknowledge.

Author's Address

   Giuseppe De Marco
   independent
   Email: demarcog83@gmail.com
